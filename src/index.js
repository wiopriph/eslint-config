module.exports = {
  env: {
    browser: true,
    node: true,
    mocha: true,
  },
  extends: [
    '@nuxtjs',
    'eslint:recommended',
    'plugin:wdio/recommended',
    'plugin:vue/recommended',
    'plugin:security/recommended',
    'plugin:anti-trojan-source/recommended',
  ],
  plugins: ['wdio'],
  rules: {
    'array-bracket-newline': ['error', 'consistent'],
    'array-element-newline': ['error', 'consistent'],
    'arrow-body-style': ['error', 'as-needed'],
    'brace-style': 'error',
    camelcase: 'error',
    'comma-dangle': ['error', 'always-multiline'],
    eqeqeq: ['error', 'always', {null: 'ignore'}],
    'grouped-accessor-pairs': ['error', 'getBeforeSet'],
    'import/no-dynamic-require': 'error',
    'max-statements-per-line': 'error',
    'multiline-ternary': ['error', 'always-multiline'],
    'newline-per-chained-call': ['error', {ignoreChainWithDepth: 2}],
    'no-debugger': process.env.NODE_ENV === 'development' ? 'warn' : 'error',
    'no-else-return': ['error', {allowElseIf: false}],
    'no-eval': 'error',
    'no-extra-semi': 'error',
    'no-multiple-empty-lines': [2, {max: 2, maxEOF: 1}],
    'no-nested-ternary': 'error',
    'no-sequences': ['error', {allowInParentheses: false}],
    'no-useless-concat': 'error',
    'object-curly-newline': ['error', {consistent: true}],
    'object-shorthand': ['error', 'properties'],
    'one-var': ['error', 'never'],
    'padding-line-between-statements': ['error',
      {blankLine: 'always', prev: '*', next: 'return'},
      {blankLine: 'always', prev: 'const', next: '*'},
      {blankLine: 'always', prev: ['const', 'let', 'var'], next: '*'},
      {blankLine: 'any', prev: ['const', 'let', 'var'], next: ['const', 'let', 'var']},
      {blankLine: 'always', prev: ['block', 'multiline-block-like', 'for', 'if', 'multiline-expression'], next: '*'},
    ],
    'prefer-template': 'error',
    'security/detect-object-injection': 'off',
    semi: ['error', 'always'],
    'space-before-function-paren': ['error', {
      anonymous: "never",
      named: "never",
      asyncArrow: "always"
    }
    ],
    // vue
    'vue/attribute-hyphenation': ['error', 'never'],
    'vue/attributes-order': 'error',
    'vue/component-name-in-template-casing': ['error', 'PascalCase'],
    'vue/custom-event-name-casing': 'error',
    'vue/html-closing-bracket-newline': ['error', {
      singleline: 'never',
      multiline: 'always',
    }],
    'vue/html-closing-bracket-spacing': ['error', {
      startTag: 'never',
      endTag: 'never',
      selfClosingTag: 'always',
    }],
    'vue/html-indent': ['error', 2],
    'vue/html-quotes': ['error', 'double', {avoidEscape: false}],
    'vue/multi-word-component-names': 0,
    'vue/multiline-html-element-content-newline': ['error', {
      ignoreWhenEmpty: true,
      allowEmptyLines: false,
    }],
    'vue/new-line-between-multi-line-property': 'error',
    'vue/no-mutating-props': 'error',
    'vue/no-potential-component-option-typo': ['error', {
      presets: ['all'],
    }],
    'vue/no-reserved-keys': 'error',
    'vue/no-unused-properties': ['error', {
      groups: [
        'props',
        'data',
        'computed',
        'methods',
      ],
      ignorePublicMembers: true,
    }],
    'vue/no-unused-refs': 'error',
    'vue/no-use-v-if-with-v-for': 'error',
    'vue/object-curly-spacing': ['error', 'always'],
    'vue/order-in-components': 'error',
    'vue/padding-line-between-blocks': 'error',
    'vue/script-indent': ['error', 2, {
      baseIndent: 0,
      switchCase: 1,
    }],
    'vue/this-in-template': 'error',
    'vue/v-on-event-hyphenation': 'error',
  },
};
